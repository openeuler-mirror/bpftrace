commit cee9167489ac1369e13f47b557e1453e1627021f
Author: Ast-x64 <Ast-x64@protonmail.com>
Date:   Mon Jan 24 08:21:57 2022 +0800

    Add support for riscv64

diff --git a/src/arch/CMakeLists.txt b/src/arch/CMakeLists.txt
index 76bb217e..127c3528 100644
--- a/src/arch/CMakeLists.txt
+++ b/src/arch/CMakeLists.txt
@@ -10,6 +10,8 @@ elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
     add_library(arch x86_64.cpp)
 elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "mips64")
     add_library(arch mips64.cpp)
+elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
+    add_library(arch riscv64.cpp)
 else()
   message(FATAL_ERROR "Unsupported architecture: ${CMAKE_SYSTEM_PROCESSOR}")
 endif()
diff --git a/src/arch/riscv64.cpp b/src/arch/riscv64.cpp
new file mode 100644
index 00000000..94889f66
--- /dev/null
+++ b/src/arch/riscv64.cpp
@@ -0,0 +1,112 @@
+#include "arch.h"
+
+#include <algorithm>
+#include <array>
+
+// SP points to the first argument that is passed on the stack
+#define ARG0_STACK 0
+
+namespace bpftrace {
+namespace arch {
+
+// clang-format off
+static std::array<std::string, 32> registers = {
+  "pc",
+  "ra",
+  "sp",
+  "gp",
+  "tp",
+  "t0",
+  "t1",
+  "t2",
+  "s0",
+  "s1",
+  "a0",
+  "a1",
+  "a2",
+  "a3",
+  "a4",
+  "a5",
+  "a6",
+  "a7",
+  "s2",
+  "s3",
+  "s4",
+  "s5",
+  "s6",
+  "s7",
+  "s8",
+  "s9",
+  "s10",
+  "s11",
+  "t3",
+  "t4",
+  "t5",
+  "t6",
+};
+
+static std::array<std::string, 8> arg_registers = {
+  "a0",
+  "a1",
+  "a2",
+  "a3",
+  "a4",
+  "a5",
+  "a6",
+  "a7",
+};
+// clang-format on
+
+int offset(std::string reg_name)
+{
+  auto it = find(registers.begin(), registers.end(), reg_name);
+  if (it == registers.end())
+  {
+    return -1;
+  }
+  return distance(registers.begin(), it);
+}
+
+int max_arg()
+{
+  return arg_registers.size() - 1;
+}
+
+int arg_offset(int arg_num)
+{
+  return offset(arg_registers.at(arg_num));
+}
+
+int pc_offset()
+{
+  return offset("pc");
+}
+
+int ret_offset()
+{
+  return offset("a0");
+}
+
+int sp_offset()
+{
+  return offset("sp");
+}
+
+int arg_stack_offset()
+{
+  return ARG0_STACK / 8;
+}
+
+std::string name()
+{
+  return std::string("riscv64");
+}
+
+std::vector<std::string> invalid_watchpoint_modes()
+{
+  throw std::runtime_error(
+      "Watchpoints are not supported on this architecture");
+}
+
+} // namespace arch
+} // namespace bpftrace
